<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[py2neo使用文档]]></title>
    <url>%2F2019%2F10%2F15%2Fpy2neo%2F</url>
    <content type="text"><![CDATA[py2ne操作neo4j数据库 安装py2neo可访问py2neo官网查看详细使用教程。 1pip install py2neo #请确保本地已安装好pip 以下操作所使用的py2neo版本为 3.1.2 连接neo4j数据库12345678from py2neo import Graph# 使用'地址'、'用户名'、'密码' 创建Graph对象，之后的操作都将已Graph对象为基础graph = Graph( "http://localhost:7474", username="&lt;用户名&gt;", password="&lt;密码&gt;") 新建neo4j节点123456789from py2neo import Node# 新建节点对象a = Node('a', name='a')b = Node('b', name='b')# 使用Graph对象创建新节点graph.create(a)graph.create(b) 连接neo4j节点1234567from py2neo import Relationship# 新建关系对象re = Relationship(a, '关系名', b)# 使用Graph对象创建新关系graph.merge(re) 更新neo4j节点12]]></content>
      <categories>
        <category>使用文档</category>
      </categories>
      <tags>
        <tag>node4j</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实体对齐与实体链接]]></title>
    <url>%2F2019%2F10%2F14%2F%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9A%84%E5%AE%9E%E4%BD%93%E5%AF%B9%E9%BD%90%E4%B8%8E%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[基本概念]]></content>
      <categories>
        <category>学习文档</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长回文子序列问题]]></title>
    <url>%2F2019%2F10%2F14%2F%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述 一个子序列被称为回文序列是指：该序列从右往左读和从左往右读的结果是一样的。例如，如下所示序列： &lt; A,C,G,T,G,T,C,A,A,A,A,T,C,G &gt;包含了许多回文子序列，如&lt; A,C,G,C,A &gt;，&lt; A,A,A,A &gt;。请设计一个动态规划的算法来计算序列x[1..n] 的最长回文子序列。该算法的时间复杂度应为O(n2)。 思路分析 此题求解回文字序列并非回文子串（子串必须是连续的）。先约定输入字符序列为S[i]，使用动态规划求解，则每阶段状态可使用dp[i] [j] 表示，含义为i号位置到j号位置的子串所包含的最长回文子序列的长度。初始状态 字符序列每个字符都各自构成长度为1的回文子序列。接下来可以开始扩大子序列长度。我们随机选定某个位置 i 开始，d[i] [i]=1，先比较 i 两边的字符，若是两边的字符刚好相等，则有dp[i-1] [i+1]=dp[i] [i]+2，否则需要从dp[i-1] [i]与dp[i] [i+1]中选取较大值作为dp[i-1] [i+1]的值。以下列出状态转移方程： 算法流程 算法实现 123456789101112131415161718192021public int longestPalindromeSubseq(String s) &#123; if (s != null) &#123; int len = s.length(); int[][] dp = new int[len][len]; char[] sc = s.toCharArray(); for (int i = 0; i &lt; len; i++) &#123; dp[i][i] = 1; &#125; for (int l = 2; l &lt;= len; l++) &#123; for (int i = 0; i &lt;= len - l; i++) &#123; int j = i + l - 1; dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]); if (sc[i] == sc[j]) &#123; dp[i][j] = dp[i + 1][j - 1] + 2; &#125; &#125; &#125; return dp[0][len - 1]; &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最长递增子序列问题]]></title>
    <url>%2F2019%2F10%2F12%2F%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述 请设计一个O(n2) 的动态规划算法来求出一个包含n 个元素的序列中的最长递增子序列。所谓递增子序列是指，从原序列中按顺序挑选出某些元素组成一个新序列，并且该新序列中的任意一个元素均大于该元素之前的所有元素。例如，输入的序列为&lt; 5, 24, 8, 17, 12, 45 &gt;，那么该序列的最长递增子序列为&lt; 5, 8, 12, 45 &gt; 或&lt; 5, 8, 17, 45 &gt;。请分析你的算法的正确性并验证其时间复杂度。 思路分析 此题可以使用动态规划的方式求解，先写出状态表示为L[i], 其含义为以i号位置为终点的最长递增子序列长度（下标默认从1开始，注意与实际代码的区别）。为了方便问题的描述，我们将输入序列标记为N[i]。 接下来开始探究此题的状态转移方程。若i为1，则L[i]=1这点无需置疑，重点在于i大于1的情况。我们依次分析，先从简单的情况开始，若是i为2，我们需要具体分析： 若是N[2] &gt; N[1]，则L[2] = L[1]+1； 反之N[2] &lt; N[1]，则L[2] = 1。 此类情况比较简单，但是足够说明问题，若是i比较大，在考虑i位置的最长递增子序列长度时，需要依次与i之前的位置进行比较，若是N[i] &gt; N[k] (k&lt;i)，则暂定P[i] = P[k]+1，依次与i之前的位置位置比较，确定满足条件的最大值作为P[i]。因此： 算法流程 算法实现-JAVA此处实现只是简单的依照上述流程所写的代码，使用leetcode最长上升子序列的测试用例顺利通过，但时间复杂度还有待优化。 123456789101112131415161718192021public int lengthOfLIS(int[] nums) &#123; int maxSubLen = 0; if (nums.length &gt; 0) &#123; int[] L = new int[nums.length]; for (int i = 0; i &lt; nums.length; i++) &#123; L[i] = 1; for (int j = i - 1; j &gt;= 0; j--) &#123; if (nums[i] &gt; nums[j]) &#123; int tmp = L[j] + 1; if (tmp &gt; L[i]) &#123; L[i] = tmp; &#125; &#125; &#125; if (L[i] &gt; maxSubLen) &#123; maxSubLen = L[i]; &#125; &#125; &#125; return maxSubLen;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[餐厅选址问题]]></title>
    <url>%2F2019%2F10%2F11%2F%E9%A4%90%E5%8E%85%E9%80%89%E5%9D%80%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述 某公司希望在高速公路上设立一些餐厅。现有n 个位置可选，距高速公路的起点分别为m1,m2 … mn(m1 &lt; m2 &lt; … &lt; mn)。对每个位置mi，该公司如果在这个位置设立餐厅的话，期望盈利为pi(pi &gt; 0)。此外，公司设立的任意两个餐厅间的距离应大于等于k(k &gt; 0)，但设立的餐厅个数没有限制。请设计一个动态规划的方法来帮助该公司选址，使得期望盈利和最大。请写出你的动态规划转移方程并给出伪代码，最后分析该算法的时间复杂度。 思路分析 使用动态规划求解最重要的是先列出问题的状态转移方程，不过在列出状态转移方程之前我们需要先约定好每阶段状态的表示方式。这道题状态的转移可以简单的看作一维状态变化（原谅没法合理的阐述与解释这里），因此可以将在第i处的状态写作P[i], 其表示从1号位置到i号位置的最大盈利数。 接下来开始分析状态转移方程，P[i] 到 P[i+1]的转变过程。首先分析简单的情况，若是i号位置与i+1号位置的距离大于k，那么P[i+1]可以简单的表示为P[i]+pi+1，但是若是两者距离小于k，那么以上公式将不再成立，但是思路也很清晰。i与i+1距离不够，那么就寻找i之前的点，找到与i+1距离大于k的点就行了，这里不防记作位置c。同样的可以得到P[c]+pi+1，但是注意这个结果未必是到i+1号位置的最大盈利，还需要与P[i]进行比较取较大值作为P[i+1]的值。因此： 算法流程]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知识图谱的数据融合]]></title>
    <url>%2F2019%2F10%2F11%2F%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E8%9E%8D%E5%90%88%2F</url>
    <content type="text"><![CDATA[数据融合的目标 数据融合的目标是找出属于现实世界中的同一实体。 数据融合的挑战 来源于不同数据源的数据之间是异构的，异构数据之间可能在本体层面上有所不同；而且在实体层上也可能会有差异，表达同一实体的标志会有不同的方式； 不同数据源之间可能存在冲突数据，由于一些不完整、错误、过时问题导致的数据冲突可能会对信息的获取产生误导，所以需要在数据融合中识别出正确的数据，以解决数据冲突。 数据融合的处理流程 确定属性体系； 使用已建立的属性体系分别对每个数据源的属性进行规范化表示，包括同义属性映射和数值单位统一； 基于实体名和实体属性对实体进行分块聚合； 将同一分块内不同来源的实体作为候选实体对，采用实体对齐算法计算实体间的相似度，将匹配得到不同来源中描述同一客观世界的实体对，建立不同数据源之间同一实体的等价链接，并进行实体属性的合并，而对于一个数据源中独有的实体，可以直接添加到知识库中。]]></content>
      <categories>
        <category>学习文档</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知识图谱的补全与更新]]></title>
    <url>%2F2019%2F10%2F11%2F%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E7%9A%84%E8%A1%A5%E5%85%A8%E4%B8%8E%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[关于知识图谱的补全与更新，主要根据两个方向去学习相关策略： NELL(Never-Ending Language Learner)系统 浙江大学陈华钧教授的研究 Q: What is the Meaning of Never-Ending Language Learner?A: A computer system that runs 24 hours per day, 7 days per week, forever, performing two tasks each day: Reading task: extracting information from web text to further populate a growing knowledge base of structured facts and knowledge. Learning Task: learning to read better than the day before, as evidenced by its ability to go back to yesterday’s text sources and extract more information, more accurately. Q: What the input of NELL look like?A: The input to NELL is an initial ontology O, with four types of pre-specified information for each class: some noun phrases that are trusted instances of that class. a few trusted contextual patterns that sre known to yield high-precision in extraction. a list of other classes in the ontology with which that class is mutually exclusive. a list of other classes of which that is a subset.]]></content>
      <categories>
        <category>学习文档</category>
      </categories>
      <tags>
        <tag>知识图谱</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫]]></title>
    <url>%2F2019%2F10%2F07%2Fpython%E7%88%AC%E8%99%AB%2F</url>
    <content type="text"><![CDATA[爬虫使用范围广泛，对于程序员或者学者来说，可谓必备基础技能之一。而且满足日常数据分析的要求并不需要深入学习爬虫，简单了解爬虫的基本原理，以及与爬虫相关的常用包就能够快速使用。为了明晰爬虫学习流程、加深自身的记忆，特整理文档记录所学。 爬虫基本流程学习爬虫之前不防先从宏观角度，了解爬虫的全部流程。爬虫简单来说，可以分为以下四步： 获取url 发送请求，获取页面 解析页面，获取所需内容 内容存储 这只是简单的描述，实际过程中不可能只爬取一个页面内容。对于爬取多个页面的情况，或者事先准备需要爬取的全部页面链接，或者在爬取过程中动态向爬取队列中添加新的页面链接。 常用爬虫包 请求包：request解析包：lxml，Beautiful Soup，XPath相关包的使用不做具体介绍，通过实操能够很快掌握 爬虫框架Scarpy为了简化爬虫代码的书写，使用框架能够帮助我们快速实现需求。Scrapy是非常优秀的爬虫框架，将会作为我今后优先使用的框架，所以重点学习一下。 Scrapy 重要的模块： spider. 用户使用过程中不可避免的模块，请求与解析操作都将在此模块中完成。pipelines. 数据后续处理，如存储操作。items. 数据的格式规范。 接下来详细介绍一下这几个模块。 Spider可使用 scrapy genspider spider名 域名 创建新的spider模块。spider模块有一些比较重要的基础： name. 爬虫名称，是定义Spider名字的名字，必须唯一。allowed_domains. 允许爬取的域名，是可选配置，不在此范围的链接不会被跟进爬取 。start_urls. 起始的URL列表，当我们没有实现 start_requests()方法时,默认会从这个列表开始抓取。start_requests(). 此方法用于生成初始请求，它必须返回一个可迭代对象 。 此方法会默认使用 start_urls 里面的URL来构造Request，而且Request是GET 请求方式。如果我们想在启动时以 POST方式访问某个站点，可以直接重写这个方法，发送 POST请求时使用 FormRequest即可 。parse(). 当Response没有指定回调函数时，该方法会默认被调用。它负责处理 Response，处理返回结果，并从中提取想要的数据和下一步的请求，然后返回。该方法需要返回一个包含Request或 ltem的可迭代对象。 piplines使用piplines需要在settings.py文件中配置。只要piplines被配置，Spider里面返回的Item都将依次被配置的piplines处理，但是可使用条件跳过无关处理过程。 我们可以自定义ItemPipeline，只需要实现指定的方法，其中必须要实现的一个方法是：process_item(item, spider)]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[查找树中节点的编号]]></title>
    <url>%2F2019%2F06%2F08%2FtreeNum%2F</url>
    <content type="text"><![CDATA[问题描述 给定一棵树，树中各节点的默认编号按照深度优先遍历排序。现给定一节点数组，请返回这组节点所对应的编号数组。 例如： 12345 8 对应编号:1 2 3 4 5 6 7 / \ 如左图，各节点按序访问为:[8,5,2,4,7,6,9], 5 7 若给定查询数组为:[7,4],则返回值应该为:[5,4] / \ / \2 4 6 9 解决方案 暂时以解决问题优先，之后若有新的思路再进行优化。树的深度优先遍历使用递归方式能够简明实现，但问题中需要返回命中节点的序号，因此再遍历的时候还需要加上全局的index，记录节点的访问次序。基本流程如下：1）从目标数组中取出需要查找的节点；2）遍历树开始查找节点位置（假定该节点一定存在此树中）；3）依次遍历树的节点，若节点为空直接返回；4）若节点不为空，则比对值是否相等，相等将序号加入返回数组；5）若不等，判断该节点是否有子树，无直接返回，有则递归，从 3）开始遍历子树； 具体代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/**/* 使用js代码为例（实际需要）/* 递归查找函数/* z_tree为树，targetID为查找节点，index为节点编号，select为返回数组/**function findIndex(z_tree,targetID,index,select) &#123; if(z_tree)&#123; if(z_tree.ID==targetID)&#123; select.push(index.count); &#125; else if(z_tree.child)&#123; for(var i=0;i&lt;z_tree.child.length;i++)&#123; index.count++; findIndex(z_tree.child[i],targetID,index,select); &#125; &#125; &#125;&#125;;// 创建树var z_tree=&#123; ID:&apos;asd001&apos;, child:[ &#123; ID:&apos;asd002&apos;, child:[ &#123; ID:&apos;asd005&apos;, &#125;, &#123; ID:&apos;asd006&apos;, &#125; ] &#125;, &#123; ID:&apos;asd003&apos;, child:[ &#123; ID:&apos;asd007&apos;, &#125;, &#123; ID:&apos;asd008&apos;, &#125; ] &#125;, &#123; ID:&apos;asd004&apos;, child:[ &#123; ID:&apos;asd009&apos;, &#125;, &#123; ID:&apos;asd010&apos;, &#125; ] &#125; ],&#125;// 目标节点数组var targetID=[&apos;asd008&apos;,&apos;asd002&apos;];// 节点编号（使用对象构建引用类型）var index=&#123;count:1&#125;;// 返回数组var select=[];// 开始遍历for(var i=0;i&lt;targetID.length;i++)&#123; index.count=1; // 每次遍历前初始化序号 findIndex(z_tree,targetID[i],index,select);&#125;console.log(select)]]></content>
      <categories>
        <category>实际问题</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git文档]]></title>
    <url>%2F2019%2F05%2F26%2FgitDoc%2F</url>
    <content type="text"><![CDATA[基本概念首先，来理解一下Git下工作区、暂存区和版本库概念 工作区：就是能够在电脑里能看到的目录。 暂存区：英文名叫stage或者index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。 版本库：工作区有一个隐藏目录 .git，这个不算工作区，而是Git的版本库。 下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系]]></content>
      <categories>
        <category>使用文档</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文档]]></title>
    <url>%2F2019%2F05%2F26%2Fhexo%2F</url>
    <content type="text"><![CDATA[欢迎使用 Hexo! 初次使用Hexo发布文章，可以查看 帮助文档 获取更多信息. 如果你在使用Hexo过程中遇到问题, 你能够在 疑难解答找到解决方式 或者通过 GitHub直接询问我. 快速开始创建新的发布1$ hexo new post "My New Post" 更多内容: Writing 启动服务器1$ hexo server 更多内容: Server 生成静态html文件1$ hexo generate 更多内容: Generating 发布到远程仓库1$ hexo deploy 更多内容: Deployment]]></content>
      <categories>
        <category>使用文档</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
